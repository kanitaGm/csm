// üìÅ src/features/csm/pages/CSMEvaluatePage.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../../contexts/AuthContext';
import { Building2, ArrowLeft, Save, CheckCircle, AlertTriangle, Clock, CheckCircle2, Lock, Shield } from 'lucide-react';
import type { Company, CSMFormDoc, CSMAssessment, CSMAssessmentAnswer } from '../../../types';
import csmService from '../../../services/csmService';
import QuestionForm from '../components/QuestionForm';
import { parseDate } from '../../../utils/dateUtils';
import { useDebouncedAutoSave } from '../../../hooks/useDebouncedAutoSave';
import { useOptimizedScoreCalculation } from '../../../hooks/useOptimizedScore';
import { useOfflineSync } from '../../../hooks/useOfflineSync'; 
import { ProgressIndicator } from '../../../components/ui/ProgressIndicator';
import { useKeyboardShortcuts } from '../../../hooks/useKeyboardShortcuts';

interface CSMEvaluatePageProps {
  vdCode?: string;
  onNavigateBack?: () => void;
}

const CSMEvaluatePage: React.FC<CSMEvaluatePageProps> = ({ vdCode: propVdCode, onNavigateBack }) => {
  useKeyboardShortcuts();
  
  // Get vdCode from props or URL params
  const vdCode = propVdCode || new URLSearchParams(window.location.search).get('vdCode') || '';
  const { user } = useAuth();

  // State variables
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [approving, setApproving] = useState(false);
  const [saveMessage, setSaveMessage] = useState<string>('');
  const [company, setCompany] = useState<Company | null>(null);
  const [form, setForm] = useState<CSMFormDoc | null>(null);
  const [existingAssessment, setExistingAssessment] = useState<CSMAssessment | null>(null);
  const [answers, setAnswers] = useState<CSMAssessmentAnswer[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  
  const { isOnline, pendingSync } = useOfflineSync();
  const { totalScore, avgScore, maxScore } = useOptimizedScoreCalculation(answers, form?.fields || []);

  // Assessment metadata state - single declaration
  const [assessmentData, setAssessmentData] = useState({
    vdCategory: '',
    vdRefDoc: '',
    vdWorkingArea: '',
    riskLevel: 'Low',
    assessor: ''
  });

  // Helper function to clean data before sending to service
  const cleanAssessmentData = (data: Record<string, unknown>): Partial<CSMAssessment> => {
    const cleaned: Partial<CSMAssessment> = {};
    
    Object.keys(data).forEach(key => {
      const value = data[key];
      if (value !== undefined && value !== null) {
        if (value === '') {
          // ‡πÅ‡∏õ‡∏•‡∏á empty string ‡πÄ‡∏õ‡πá‡∏ô undefined ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö optional fields ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö empty string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö required fields
          if (['vdCategory', 'riskLevel', 'assessor'].includes(key)) {
            (cleaned as Record<string, unknown>)[key] = value;
          } else {
            (cleaned as Record<string, unknown>)[key] = undefined;
          }
        } else {
          (cleaned as Record<string, unknown>)[key] = value;
        }
      }
    });
    
    return cleaned;
  };

  // Validate assessment data
  const validateAssessmentData = useCallback((): boolean => {
    if (!assessmentData.vdCategory.trim()) {
      setSaveMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
      return false;
    }
    if (!assessmentData.riskLevel.trim()) {
      setSaveMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á');
      return false;
    }
    if (!assessmentData.assessor.trim()) {
      setSaveMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô');
      return false;
    }
    return true;
  }, [assessmentData.vdCategory, assessmentData.riskLevel, assessmentData.assessor]);

  // Safe date parsing function
  const safeParseDate = (dateValue: unknown): Date => {
    // Type guard to check if dateValue is a valid DateInput
    if (dateValue === null || dateValue === undefined) {
      return new Date();
    }
    
    // Check if it's already a Date object
    if (dateValue instanceof Date) {
      return dateValue;
    }
    
    // Check if it's a string that can be parsed
    if (typeof dateValue === 'string') {
      const parsed = parseDate(dateValue);
      return parsed || new Date();
    }
    
    // Handle number (timestamp)
    if (typeof dateValue === 'number') {
      try {
        return new Date(dateValue);
      } catch {
        return new Date();
      }
    }
    
    // For Firebase Timestamp or other objects with toDate method
    if (typeof dateValue === 'object' && dateValue !== null && 'toDate' in dateValue) {
      try {
        return (dateValue as { toDate(): Date }).toDate();
      } catch {
        return new Date();
      }
    }
    
    return new Date();
  };

  // Define handleAutoSave function before using it in useDebouncedAutoSave
  const handleAutoSave = useCallback(async () => {
    if (!validateAssessmentData() || !company || !form || existingAssessment?.isApproved) return;

    try {
      setSaveMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...');

      const assessmentPayload: Omit<CSMAssessment, 'id'> = {
        vdCode: company.vdCode,
        vdName: company.name,
        vdCategory: assessmentData.vdCategory,
        vdRefDoc: assessmentData.vdRefDoc || undefined,
        vdWorkingArea: assessmentData.vdWorkingArea || undefined,
        riskLevel: assessmentData.riskLevel as 'Low' | 'Moderate' | 'High' | '',
        assessor: assessmentData.assessor,
        isActive: true,
        updateBy: user?.email || 'Admin System',
        createdAt: existingAssessment?.createdAt || new Date(),
        updatedAt: new Date(),
        answers: answers,
        isApproved: existingAssessment?.isApproved ?? false,
        ...cleanAssessmentData({})
      };

      if (existingAssessment && existingAssessment.id) {
        await csmService.assessments.update(existingAssessment.id, assessmentPayload);
      } else {
        const newAssessmentId = await csmService.assessments.create(assessmentPayload);
        const newAssessment = await csmService.assessments.getById(newAssessmentId);
        setExistingAssessment(newAssessment);
      }

      setLastSaved(new Date());
      setSaveMessage('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      
      setTimeout(() => setSaveMessage(''), 60000);

    } catch (err) {
      console.error('Error auto-saving assessment:', err);
      setSaveMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
      setTimeout(() => setSaveMessage(''), 20000);
    }
  }, [validateAssessmentData, assessmentData, answers, company, form, existingAssessment, user?.email]);

  const { saving: autoSaving } = useDebouncedAutoSave(
    { answers, assessmentData },
    handleAutoSave,
    20000 // ‡∏î‡∏µ‡πÄ‡∏•‡∏¢‡πå 20 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
  );

  const handleNavigateBack = () => {
    if (onNavigateBack) {
      onNavigateBack();
    } else {
      window.location.href = '/csm';
    }
  };

  // Load initial data - wrapped in useCallback to fix dependency warning
  const loadInitialData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      // Load company data
      const companyData = await csmService.companies.getByVdCode(vdCode);
      if (!companyData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
      }
      setCompany(companyData);

      // Load CSM form
      const formData = await csmService.forms.getCSMChecklist();
      if (!formData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° CSM Checklist');
      }
      setForm(formData);

      // Check for existing assessment
      const existingAssessments = await csmService.assessments.getByVdCode(vdCode);
      const activeAssessment = existingAssessments.find(a => a.isActive);
      
      if (activeAssessment) {
        setExistingAssessment(activeAssessment);
        setAnswers(activeAssessment.answers || []);
        setAssessmentData({
          vdCategory: activeAssessment.vdCategory || '',
          vdRefDoc: activeAssessment.vdRefDoc || '',
          vdWorkingArea: activeAssessment.vdWorkingArea || '',
          riskLevel: activeAssessment.riskLevel || 'Low',
          assessor: activeAssessment.assessor || ''
        });
        
        // ‡πÉ‡∏ä‡πâ safeParseDate ‡πÅ‡∏ó‡∏ô convertTimestampToDate
        const lastUpdateTime = activeAssessment.updatedAt || activeAssessment.createdAt;
        if (lastUpdateTime) {
          const lastSavedDate = safeParseDate(lastUpdateTime);
          setLastSaved(lastSavedDate);
        }
      }

    } catch (err) {
      console.error('Error loading data:', err);
      setError(err instanceof Error ? err.message : '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setLoading(false);
    }
  }, [vdCode]);

  // Load initial data
  useEffect(() => {
    if (vdCode) {
      loadInitialData();
    } else {
      setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
      setLoading(false);
    }
  }, [vdCode, loadInitialData]);

  // Auto-save functionality - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á/
  /*
  useEffect(() => {
    if (existingAssessment?.isApproved) return; // ‡πÑ‡∏°‡πà auto-save ‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß

    if (answers.length > 0 && assessmentData.vdCategory && assessmentData.assessor) {
      const timeoutId = setTimeout(() => {
        handleAutoSave();
      }, 60000*10); // ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ*10 =10‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

      return () => clearTimeout(timeoutId); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå timeout ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
  }, [answers, assessmentData.vdCategory, assessmentData.assessor, existingAssessment?.isApproved, handleAutoSave]);
*/



  // Handle answers change
  const handleAnswersChange = useCallback((newAnswers: CSMAssessmentAnswer[]) => {
    if (existingAssessment?.isApproved) return; // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
    setAnswers(newAnswers);
  }, [existingAssessment?.isApproved]);

  // Manual save function (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
  const handleManualSave = useCallback(async () => {
    if (!validateAssessmentData()) {
      return;
    }

    if (!company || !form) return;

    try {
      setSaving(true);
      setSaveMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...');

      const assessmentPayload: Omit<CSMAssessment, 'id'> = {
        vdCode: company.vdCode,
        vdName: company.name,
        vdCategory: assessmentData.vdCategory,
        vdRefDoc: assessmentData.vdRefDoc || undefined,
        vdWorkingArea: assessmentData.vdWorkingArea || undefined,
        riskLevel: assessmentData.riskLevel as 'Low' | 'Moderate' | 'High' | '',
        assessor: assessmentData.assessor,
        isActive: true,
        updateBy: user?.email || 'current-user@example.com',
        createdAt: existingAssessment?.createdAt || new Date(),
        updatedAt: new Date(),
        answers: answers,
        isApproved: existingAssessment?.isApproved ?? false,
        ...cleanAssessmentData({})
      };

      if (existingAssessment && existingAssessment.id) {
        await csmService.assessments.update(existingAssessment.id, assessmentPayload);
        setSaveMessage('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      } else {
        await csmService.assessments.create(assessmentPayload);
        setSaveMessage('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      }

      setLastSaved(new Date());
      
      // Refresh data
      await loadInitialData();
      
      setTimeout(() => setSaveMessage(''), 3000);

    } catch (err) {
      console.error('Error saving assessment:', err);
      setSaveMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      setTimeout(() => setSaveMessage(''), 5000);
    } finally {
      setSaving(false);
    }
  }, [validateAssessmentData, company, form, assessmentData, answers, existingAssessment, user?.email, loadInitialData]);

  // Check if assessment is complete
  const isAssessmentComplete = useCallback((): boolean => {
    if (!form || answers.length === 0) return false;
    
    const requiredFields = form.fields.filter(field => field.required);
    const completedRequired = requiredFields.every(field => {
      const answer = answers.find(a => a.ckItem === field.ckItem);
      return answer && 
             answer.comment.trim() !== '' && 
             answer.score && 
             answer.score !== '' &&
             answer.isFinish;
    });
    
    return completedRequired;
  }, [form, answers]);

  // Approve assessment function
  const handleApprove = useCallback(async () => {
    if (!isAssessmentComplete()) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô');
      return;
    }

    if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ? ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å')) {
      return;
    }

    if (!company || !form || !existingAssessment || !existingAssessment.id) return;

    try {
      setApproving(true);
      setSaveMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô...');

      const assessmentPayload: Partial<CSMAssessment> = {
        isApproved: true,
        updatedAt: new Date(),
        updateBy: user?.email || 'current-user@example.com',
        ...cleanAssessmentData({})
      };

      await csmService.assessments.update(existingAssessment.id, assessmentPayload);
      
      setSaveMessage('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß');
      
      // Refresh data
      await loadInitialData();
      
      setTimeout(() => setSaveMessage(''), 5000);

    } catch (err) {
      console.error('Error approving assessment:', err);
      setSaveMessage('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô');
      setTimeout(() => setSaveMessage(''), 5000);
    } finally {
      setApproving(false);
    }
  }, [company, form, existingAssessment, user?.email, loadInitialData, isAssessmentComplete]);

  // Calculate completion stats
  const getCompletionStats = useCallback(() => {
    if (!form || answers.length === 0) return { completed: 0, total: 0, percentage: 0, withAnswers: 0 };
    
    const completed = answers.filter(answer => 
      answer.isFinish && answer.comment.trim() && answer.score && answer.score !== ''
    ).length;

    const withAnswers = answers.filter(answer => 
      answer.comment.trim() || (answer.score && answer.score !== '')
    ).length;
    
    return {
      completed,
      withAnswers,
      total: form.fields.length,
      percentage: Math.round((completed / form.fields.length) * 100)
    };
  }, [form, answers]);

  const stats = getCompletionStats();

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <div className="w-12 h-12 mx-auto mb-4 border-b-2 border-blue-600 rounded-full animate-spin"></div>
          <p className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 mx-auto mb-4 text-red-500" />
          <h2 className="mb-2 text-xl font-semibold text-gray-900">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p className="mb-4 text-gray-600">{error}</p>
          <button
            onClick={handleNavigateBack}
            className="px-4 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          </button>
        </div>
      </div>
    );
  }

  if (!company || !form) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-50">
        <div className="text-center">
          <p className="text-gray-600">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô</p>
        </div>
      </div>
    );
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° offline indicator
  if (!isOnline) {
    return (
      <div className="relative min-h-screen bg-gray-50">
        <div className="fixed z-50 px-4 py-3 text-orange-700 bg-orange-100 border border-orange-400 rounded top-4 right-4">
          <div className="flex items-center gap-2">
            <span>‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Offline</span>
            {pendingSync && <span>- ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</span>}
          </div>
        </div>
        <div className="px-4 pt-20">
          <p className="text-center text-gray-600">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
        </div>
      </div>
    );
  }
  
  const isReadOnly = existingAssessment?.isApproved;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b shadow-sm">
        <div className="px-4 py-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <button
                onClick={handleNavigateBack}
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft className="w-5 h-5" />
                <span>‡∏Å‡∏•‡∏±‡∏ö</span>
              </button>
              
              <div className="flex items-center gap-3">
                <Building2 className="w-8 h-8 text-blue-600" />
                <div>
                  <h1 className="text-xl font-bold text-gray-900">{company.name}</h1>
                  <p className="text-sm text-gray-600">‡∏£‡∏´‡∏±‡∏™: {company.vdCode}</p>
                </div>
              </div>

              {/* Approval Status Badge */}
              {isReadOnly && (
                <div className="flex items-center gap-2 px-3 py-1 text-green-800 bg-green-100 rounded-full">
                  <Shield className="w-4 h-4" />
                  <span className="text-sm font-medium">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                </div>
              )}
            </div>

            <div className="flex items-center gap-4">
              {/* Save Status */}
              <div className="flex items-center gap-2">
                {autoSaving ? (
                  <div className="flex items-center gap-2 text-yellow-600">
                    <Clock className="w-4 h-4 animate-pulse" />
                    <span className="text-sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...</span>
                  </div>
                ) : lastSaved ? (
                  <div className="flex items-center gap-2 text-green-600">
                    <CheckCircle2 className="w-4 h-4" />
                    <span className="text-sm">
                      ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {lastSaved.toLocaleTimeString('th-TH')}
                    </span>
                  </div>
                ) : null}
              </div>

              {/* Completion Status */}
              <div className="flex items-center gap-2">
                {isAssessmentComplete() ? (
                  <CheckCircle className="w-5 h-5 text-green-600" />
                ) : (
                  <div className="w-5 h-5 border-2 border-gray-300 rounded-full" />
                )}
                <span className="text-sm text-gray-600">
                  {stats.completed}/{stats.total} ‡∏Ç‡πâ‡∏≠ ({stats.percentage}%)
                </span>
                {totalScore > 0 && (
                  <span className="ml-2 text-sm text-blue-600">
                    ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {totalScore.toFixed(1)}/{maxScore}
                  </span>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex items-center gap-2">
                {!isReadOnly && (
                  <button
                    onClick={handleManualSave}
                    disabled={saving}
                    className="flex items-center gap-2 px-6 py-2 text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <Save className="w-4 h-4" />
                    {saving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (Ctrl+S)'}
                  </button>
                )}

                {!isReadOnly && isAssessmentComplete() && (
                  <button
                    onClick={handleApprove}
                    data-action="submit"
                    disabled={approving}
                    className="flex items-center gap-2 px-6 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    <CheckCircle className="w-4 h-4" />
                    {approving ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (Ctrl+Enter)'}
                  </button>
                )}

                {isReadOnly && (
                  <div className="flex items-center gap-2 text-gray-500">
                    <Lock className="w-4 h-4" />
                    <span className="text-sm">‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Save Message */}
      {saveMessage && (
        <div className="px-4 py-2 mx-auto max-w-7xl sm:px-6 lg:px-8">
          <div className={`p-3 rounded-lg text-sm ${
            saveMessage.includes('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à') || saveMessage.includes('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô')
              ? 'bg-green-100 text-green-800 border border-green-200'
              : saveMessage.includes('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')
              ? 'bg-red-100 text-red-800 border border-red-200'
              : 'bg-blue-100 text-blue-800 border border-blue-200'
          }`}>
            {saveMessage}
          </div>
        </div>
      )}

      {/* Assessment Metadata Form */}
      <div className="px-4 py-6 mx-auto max-w-7xl sm:px-6 lg:px-8">
        <div className="p-6 mb-6 bg-white border rounded-lg shadow-sm">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-900">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</h2>
            {isReadOnly && (
              <div className="flex items-center gap-2 px-3 py-1 rounded-full text-amber-600 bg-amber-50">
                <Lock className="w-4 h-4" />
                <span className="text-sm">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ</span>
              </div>
            )}
          </div>

          {/* ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô 3 ‡∏ä‡πà‡∏≠‡∏á */}
          <div className="grid grid-cols-1 gap-4 mb-4 md:grid-cols-3">
            {/* Company Category */}
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (Category)<span className="text-red-500">*</span>
              </label>
              <select
                value={assessmentData.vdCategory}
                onChange={(e) => setAssessmentData(prev => ({ ...prev, vdCategory: e.target.value }))}
                disabled={isReadOnly}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                <option value="1">‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥ | Office Admin</option>
                <option value="2">‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ | Service</option>
                <option value="3">‡∏á‡∏≤‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á | Structure, Mechanical</option>
                <option value="4">‡∏á‡∏≤‡∏ô‡∏Ç‡∏ô‡∏™‡πà‡∏á | Transportor</option>
                <option value="0">‡∏≠‡∏∑‡πà‡∏ô‡πÜ/‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö/‡πÑ‡∏°‡πà‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à</option>
              </select>
            </div>

            {/* Reference Document */}
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô Contract/PO
              </label>
              <input
                type="text"
                value={assessmentData.vdRefDoc}
                onChange={(e) => setAssessmentData(prev => ({ ...prev, vdRefDoc: e.target.value }))}
                placeholder="‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤, PO, Job No."
                disabled={isReadOnly}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              />
            </div>

            {/* Working Area */}
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
              </label>
              <input
                type="text"
                value={assessmentData.vdWorkingArea}
                onChange={(e) => setAssessmentData(prev => ({ ...prev, vdWorkingArea: e.target.value }))}
                placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà"
                disabled={isReadOnly}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              />
            </div>
          </div>

          {/* ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á 2 ‡∏ä‡πà‡∏≠‡∏á */}
          <div className="grid grid-cols-1 gap-4 mb-4 md:grid-cols-2">
            {/* Risk Level */}
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á <span className="text-red-500">*</span>
              </label>
              <select
                value={assessmentData.riskLevel}
                onChange={(e) => setAssessmentData(prev => ({ ...prev, riskLevel: e.target.value }))}
                disabled={isReadOnly}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              >
                <option value="Low">Low - ‡∏ï‡πà‡∏≥</option>
                <option value="Moderate">Moderate - ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                <option value="High">High - ‡∏™‡∏π‡∏á</option>
              </select>
            </div>

            {/* Assessor */}
            <div>
              <label className="block mb-2 text-sm font-medium text-gray-700">
                ‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={assessmentData.assessor}
                onChange={(e) => setAssessmentData(prev => ({ ...prev, assessor: e.target.value }))}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"
                disabled={isReadOnly}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
              />
            </div>
          </div>

          {/* Status Indicators */}
          <div className="p-4 mt-6 rounded-lg bg-gray-50">
            <div className="grid grid-cols-1 gap-4 text-sm md:grid-cols-4">
              <div className="flex items-center justify-between">
                <span className="text-gray-600">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤:</span>
                <span className="font-medium">
                  {stats.completed}/{stats.total} ‡∏Ç‡πâ‡∏≠ ({stats.percentage}%)
                </span>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-gray-600">‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:</span>
                <span className="font-medium text-blue-600">
                  {stats.withAnswers} ‡∏Ç‡πâ‡∏≠
                </span>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°:</span>
                <span className="font-medium text-blue-600">
                  {totalScore.toFixed(1)}/{maxScore} ({avgScore.toFixed(1)} ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢)
                </span>
              </div>

              <div className="flex items-center justify-between">
                <span className="text-gray-600">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                <span className={`font-medium ${
                  isReadOnly ? 'text-green-600' :
                  isAssessmentComplete() ? 'text-green-600' : 'text-orange-600'
                }`}>
                  {isReadOnly ? '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : isAssessmentComplete() ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}
                </span>
              </div>

              {existingAssessment && (
                <div className="flex items-center justify-between">
                  <span className="text-gray-600">‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</span>
                  <span className="font-medium">
                    {lastSaved ? lastSaved.toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  </span>
                </div>
              )}
            </div>
          </div>

        {/* Progress Bar */}
        <div className="p-4 mb-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
          <ProgressIndicator
            current={stats.completed}
            total={stats.total}
            size="lg"
            color="blue"
          />
        </div>


          {/* Question Form */}
          {form && (
            <QuestionForm
              formFields={form.fields}
              initialAnswers={answers}
              vdCode={company.vdCode}
              onAnswersChange={handleAnswersChange}
              onSave={handleManualSave}
              readOnly={isReadOnly}              
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default CSMEvaluatePage;