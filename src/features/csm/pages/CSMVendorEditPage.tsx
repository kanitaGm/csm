// üìÅ src/features/csm/pages/CSMVendorEditPage.tsx
// Edit CSM vendor page
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, Save, Plus, Building2, MapPin, 
  User, AlertCircle, Trash2
} from 'lucide-react';
import type { CSMVendor } from '../../../types';
import { csmVendorService } from '../../../services/csmVendorService';
import { useToast } from '../../../hooks/useToast';
import { ToastContainer } from '../../../components/ui/ToastContainer';
import { SkeletonLoader } from '../../../components/ui/SkeletonLoader';
import { CSM_VENDOR_CATEGORIES, ASSESSMENT_FREQUENCIES } from '../../../types/csm';

const CSMVendorEditPage: React.FC = () => {
  const { vendorId } = useParams<{ vendorId: string }>();
  const navigate = useNavigate();
  const { toasts, addToast, removeToast } = useToast();
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [originalVendor, setOriginalVendor] = useState<CSMVendor | null>(null);

  const [formData, setFormData] = useState<Partial<CSMVendor>>({
    vdCode: '',
    vdName: '',
    companyId: '',
    category: '1',
    freqAss: '1year',
    workingArea: [],
    isActive: true
  });

  const [workingAreaInput, setWorkingAreaInput] = useState('');

  useEffect(() => {
    if (vendorId) {
      loadVendorData();
    }
  }, [vendorId]);

  const loadVendorData = async () => {
    if (!vendorId) return;

    try {
      setLoading(true);
      const vendor = await csmVendorService.getById(vendorId);
      
      if (!vendor) {
        addToast({
          type: 'error',
          title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
        });
        navigate('/csm');
        return;
      }

      setOriginalVendor(vendor);
      setFormData({
        vdCode: vendor.vdCode,
        vdName: vendor.vdName,
        companyId: vendor.companyId,
        category: vendor.category,
        freqAss: vendor.freqAss,
        workingArea: vendor.workingArea || [],
        isActive: vendor.isActive
      });

    } catch (error) {
      console.error('Error loading vendor:', error);
      addToast({
        type: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡πÑ‡∏î‡πâ'
      });
    } finally {
      setLoading(false);
    }
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!formData.vdCode?.trim()) {
      newErrors.vdCode = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤';
    }

    if (!formData.vdName?.trim()) {
      newErrors.vdName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤';
    }

    if (!formData.companyId?.trim()) {
      newErrors.companyId = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleInputChange = (field: keyof CSMVendor, value: any) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));

    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({
        ...prev,
        [field]: ''
      }));
    }
  };

  const handleAddWorkingArea = () => {
    if (workingAreaInput.trim() && !formData.workingArea?.includes(workingAreaInput.trim())) {
      setFormData(prev => ({
        ...prev,
        workingArea: [...(prev.workingArea || []), workingAreaInput.trim()]
      }));
      setWorkingAreaInput('');
    }
  };

  const handleRemoveWorkingArea = (area: string) => {
    setFormData(prev => ({
      ...prev,
      workingArea: prev.workingArea?.filter(a => a !== area) || []
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm() || !originalVendor) {
      addToast({
        type: 'error',
        title: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      });
      return;
    }

    try {
      setSaving(true);

      const updateData: Partial<CSMVendor> = {
        vdCode: formData.vdCode!,
        vdName: formData.vdName!,
        companyId: formData.companyId!,
        category: formData.category || '1',
        freqAss: formData.freqAss || '1year',
        workingArea: formData.workingArea || [],
        isActive: formData.isActive,
        lastUpdateBy: 'current-user@example.com' // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏à‡∏≤‡∏Å auth context
      };

      await csmVendorService.update(originalVendor.id!, updateData);

      addToast({
        type: 'success',
        title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
      });

      // Navigate back to detail page
      setTimeout(() => {
        navigate(`/csm/vendors/${originalVendor.id}`);
      }, 1000);

    } catch (error) {
      console.error('Error updating vendor:', error);
      addToast({
        type: 'error',
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
      });
    } finally {
      setSaving(false);
    }
  };

  const handleToggleActive = () => {
    const newStatus = !formData.isActive;
    const action = newStatus ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
    
    if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£${action}‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      handleInputChange('isActive', newStatus);
    }
  };

  const getCategoryInfo = (categoryCode: string) => {
    return CSM_VENDOR_CATEGORIES.find(cat => cat.code === categoryCode);
  };

  const hasChanges = () => {
    if (!originalVendor) return false;
    
    return (
      formData.vdCode !== originalVendor.vdCode ||
      formData.vdName !== originalVendor.vdName ||
      formData.companyId !== originalVendor.companyId ||
      formData.category !== originalVendor.category ||
      formData.freqAss !== originalVendor.freqAss ||
      formData.isActive !== originalVendor.isActive ||
      JSON.stringify(formData.workingArea?.sort()) !== JSON.stringify(originalVendor.workingArea?.sort())
    );
  };

  if (loading) {
    return (
      <div className="min-h-screen py-8 bg-gray-50">
        <div className="max-w-4xl px-4 mx-auto sm:px-6 lg:px-8">
          <SkeletonLoader rows={8} />
        </div>
      </div>
    );
  }

  if (!originalVendor) {
    return (
      <div className="min-h-screen py-8 bg-gray-50">
        <div className="max-w-4xl px-4 mx-auto text-center sm:px-6 lg:px-8">
          <h1 className="mb-4 text-2xl font-bold text-gray-900">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤</h1>
          <button
            onClick={() => navigate('/csm')}
            className="text-blue-600 hover:text-blue-800"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen py-8 bg-gray-50">
      <div className="max-w-4xl px-4 mx-auto sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <button
            onClick={() => navigate(`/csm/vendors/${originalVendor.id}`)}
            className="flex items-center mb-4 text-gray-600 hover:text-gray-900"
          >
            <ArrowLeft className="w-5 h-5 mr-2" />
            ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤
          </button>
          
          <div className="flex items-center space-x-4">
            <div className="flex items-center justify-center w-12 h-12 bg-blue-100 rounded-lg">
              <Building2 className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <h1 className="text-2xl font-bold text-gray-900">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤</h1>
              <p className="text-gray-600">{originalVendor.vdName} ({originalVendor.vdCode})</p>
            </div>
          </div>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Basic Information */}
          <div className="p-6 bg-white border rounded-lg shadow-sm">
            <div className="flex items-center justify-between mb-6">
              <h2 className="flex items-center text-lg font-semibold text-gray-900">
                <User className="w-5 h-5 mr-2" />
                ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
              </h2>
              
              <button
                type="button"
                onClick={handleToggleActive}
                className={`px-4 py-2 rounded-md text-sm font-medium flex items-center ${
                  formData.isActive 
                    ? 'bg-red-100 text-red-700 hover:bg-red-200' 
                    : 'bg-green-100 text-green-700 hover:bg-green-200'
                }`}
              >
                {formData.isActive ? (
                  <>
                    <Trash2 className="w-4 h-4 mr-1" />
                    ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                  </>
                ) : (
                  <>
                    <Plus className="w-4 h-4 mr-1" />
                    ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                  </>
                )}
              </button>
            </div>

            <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤ <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={formData.vdCode || ''}
                  onChange={(e) => handleInputChange('vdCode', e.target.value)}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.vdCode ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô VD001, CONTRACTOR_001"
                />
                {errors.vdCode && (
                  <p className="flex items-center mt-1 text-sm text-red-600">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.vdCode}
                  </p>
                )}
              </div>

              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤ <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={formData.vdName || ''}
                  onChange={(e) => handleInputChange('vdName', e.target.value)}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.vdName ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤"
                />
                {errors.vdName && (
                  <p className="flex items-center mt-1 text-sm text-red-600">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.vdName}
                  </p>
                )}
              </div>

              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={formData.companyId || ''}
                  onChange={(e) => handleInputChange('companyId', e.target.value)}
                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors.companyId ? 'border-red-300' : 'border-gray-300'
                  }`}
                  placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
                />
                {errors.companyId && (
                  <p className="flex items-center mt-1 text-sm text-red-600">
                    <AlertCircle className="w-4 h-4 mr-1" />
                    {errors.companyId}
                  </p>
                )}
              </div>

              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà <span className="text-red-500">*</span>
                </label>
                <select
                  value={formData.category || '1'}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {CSM_VENDOR_CATEGORIES.map(category => (
                    <option key={category.code} value={category.code}>
                      {category.name} - {category.description}
                    </option>
                  ))}
                </select>
                {formData.category && (
                  <p className="mt-1 text-sm text-gray-600">
                    ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {getCategoryInfo(formData.category)?.defaultFrequency || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
                  </p>
                )}
              </div>

              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô
                </label>
                <select
                  value={formData.freqAss || '1year'}
                  onChange={(e) => handleInputChange('freqAss', e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {ASSESSMENT_FREQUENCIES.map(freq => (
                    <option key={freq.value} value={freq.value}>
                      {freq.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                </label>
                <div className="flex items-center space-x-4">
                  <span className={`px-3 py-1 rounded text-sm ${
                    formData.isActive 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-red-100 text-red-800'
                  }`}>
                    {formData.isActive ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Working Areas */}
          <div className="p-6 bg-white border rounded-lg shadow-sm">
            <h2 className="flex items-center mb-6 text-lg font-semibold text-gray-900">
              <MapPin className="w-5 h-5 mr-2" />
              ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô
            </h2>

            <div className="space-y-4">
              <div className="flex space-x-2">
                <input
                  type="text"
                  value={workingAreaInput}
                  onChange={(e) => setWorkingAreaInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddWorkingArea())}
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô SCCC, CWT, AGG"
                />
                <button
                  type="button"
                  onClick={handleAddWorkingArea}
                  className="flex items-center px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700"
                >
                  <Plus className="w-4 h-4 mr-1" />
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°
                </button>
              </div>

              {formData.workingArea && formData.workingArea.length > 0 && (
                <div className="flex flex-wrap gap-2">
                  {formData.workingArea.map((area, index) => (
                    <span
                      key={index}
                      className="inline-flex items-center px-3 py-1 text-sm text-blue-800 bg-blue-100 rounded-full"
                    >
                      {area}
                      <button
                        type="button"
                        onClick={() => handleRemoveWorkingArea(area)}
                        className="ml-2 text-blue-600 hover:text-blue-800"
                      >
                        √ó
                      </button>
                    </span>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Changes Summary */}
          {hasChanges() && (
            <div className="p-4 border border-yellow-200 rounded-lg bg-yellow-50">
              <h3 className="mb-2 text-sm font-medium text-yellow-800">‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:</h3>
              <ul className="space-y-1 text-sm text-yellow-700">
                {formData.vdCode !== originalVendor.vdCode && (
                  <li>‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤: {originalVendor.vdCode} ‚Üí {formData.vdCode}</li>
                )}
                {formData.vdName !== originalVendor.vdName && (
                  <li>‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤: {originalVendor.vdName} ‚Üí {formData.vdName}</li>
                )}
                {formData.companyId !== originalVendor.companyId && (
                  <li>‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: {originalVendor.companyId} ‚Üí {formData.companyId}</li>
                )}
                {formData.category !== originalVendor.category && (
                  <li>‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {originalVendor.category} ‚Üí {formData.category}</li>
                )}
                {formData.freqAss !== originalVendor.freqAss && (
                  <li>‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô: {originalVendor.freqAss} ‚Üí {formData.freqAss}</li>
                )}
                {formData.isActive !== originalVendor.isActive && (
                  <li>‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {originalVendor.isActive ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'} ‚Üí {formData.isActive ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}</li>
                )}
                {JSON.stringify(formData.workingArea?.sort()) !== JSON.stringify(originalVendor.workingArea?.sort()) && (
                  <li>‚Ä¢ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô: ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á</li>
                )}
              </ul>
            </div>
          )}

          {/* Actions */}
          <div className="flex justify-between">
            <div className="flex space-x-4">
              <button
                type="button"
                onClick={() => navigate(`/csm/vendors/${originalVendor.id}`)}
                className="px-6 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={saving}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
              
              <button
                type="button"
                onClick={() => {
                  setFormData({
                    vdCode: originalVendor.vdCode,
                    vdName: originalVendor.vdName,
                    companyId: originalVendor.companyId,
                    category: originalVendor.category,
                    freqAss: originalVendor.freqAss,
                    workingArea: originalVendor.workingArea || [],
                    isActive: originalVendor.isActive
                  });
                  setErrors({});
                }}
                className="px-6 py-2 text-gray-700 border border-gray-300 rounded-md hover:bg-gray-50"
                disabled={saving || !hasChanges()}
              >
                ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
              </button>
            </div>

            <button
              type="submit"
              disabled={saving || !hasChanges()}
              className="flex items-center px-6 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {saving ? (
                <>
                  <div className="w-4 h-4 mr-2 border-2 border-white rounded-full animate-spin border-t-transparent" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
                </>
              )}
            </button>
          </div>
        </form>

        {/* Metadata */}
        <div className="p-4 mt-8 bg-gray-100 rounded-lg">
          <h3 className="mb-2 text-sm font-medium text-gray-700">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö</h3>
          <div className="grid grid-cols-1 gap-4 text-sm text-gray-600 md:grid-cols-2">
            <div>
              <span className="font-medium">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</span>
              <span className="ml-2">
                {new Date(originalVendor.createdAt).toLocaleDateString('th-TH', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
            <div>
              <span className="font-medium">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</span>
              <span className="ml-2">
                {new Date(originalVendor.updatedAt).toLocaleDateString('th-TH', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
            {originalVendor.createdBy && (
              <div>
                <span className="font-medium">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢:</span>
                <span className="ml-2">{originalVendor.createdBy}</span>
              </div>
            )}
            {originalVendor.lastUpdateBy && (
              <div>
                <span className="font-medium">‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢:</span>
                <span className="ml-2">{originalVendor.lastUpdateBy}</span>
              </div>
            )}
          </div>
        </div>
      </div>

      <ToastContainer toasts={toasts} onRemove={removeToast} />
    </div>
  );
};

export default CSMVendorEditPage;