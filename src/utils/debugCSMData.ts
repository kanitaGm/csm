// üìÅ src/utils/debugCSMData.ts
// Utility ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSM ‡πÉ‡∏ô Firestore

import { 
  collection, 
  getDocs, 
  addDoc, 
  doc,
  setDoc
} from 'firebase/firestore';
import { db } from '../config/firebase';
import type { CSMVendor, Company } from '../types';

// =================== DEBUG FUNCTIONS ===================

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• vendors ‡πÉ‡∏ô Firestore ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const checkVendorsData = async () => {
  console.log('üîç Checking CSM Vendors data...');
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö collection csmVendors
    const vendorsSnapshot = await getDocs(collection(db, 'csmVendors'));
    console.log(`üìä Found ${vendorsSnapshot.size} documents in csmVendors collection`);
    
    if (vendorsSnapshot.size === 0) {
      console.log('‚ö†Ô∏è No vendors found in csmVendors collection');
      return { count: 0, vendors: [] };
    }
    
    const vendors: CSMVendor[] = [];
    vendorsSnapshot.forEach(doc => {
      const data = { id: doc.id, ...doc.data() } as CSMVendor;
      vendors.push(data);
      console.log('üìÑ Vendor:', data.vdCode, '-', data.vdName);
    });
    
    return { count: vendors.length, vendors };
    
  } catch (error) {
    console.error('‚ùå Error checking vendors data:', error);
    return { count: 0, vendors: [], error };
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• companies ‡πÉ‡∏ô Firestore ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export const checkCompaniesData = async () => {
  console.log('üîç Checking Companies data...');
  
  try {
    const companiesSnapshot = await getDocs(collection(db, 'companies'));
    console.log(`üìä Found ${companiesSnapshot.size} documents in companies collection`);
    
    if (companiesSnapshot.size === 0) {
      console.log('‚ö†Ô∏è No companies found in companies collection');
      return { count: 0, companies: [] };
    }
    
    const companies: Company[] = [];
    companiesSnapshot.forEach(doc => {
      const data = { id: doc.id, ...doc.data() } as Company;
      companies.push(data);
      console.log('üè¢ Company:', data.companyId, '-', data.name);
    });
    
    return { count: companies.length, companies };
    
  } catch (error) {
    console.error('‚ùå Error checking companies data:', error);
    return { count: 0, companies: [], error };
  }
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö CSM
 */
export const performCSMDataCheck = async () => {
  console.group('üè• CSM Data Health Check');
  
  const results = {
    vendors: await checkVendorsData(),
    companies: await checkCompaniesData(),
    timestamp: new Date().toISOString()
  };
  
  console.log('üìã Summary:');
  console.log(`- Vendors: ${results.vendors.count}`);
  console.log(`- Companies: ${results.companies.count}`);
  
  console.groupEnd();
  return results;
};

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
 */
export const createSampleData = async () => {
  console.log('üîß Creating sample data...');
  
  try {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á sample companies
    const sampleCompanies: Omit<Company, 'id'>[] = [
      {
        companyId: 'COM001',
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        type: 'main',
        contactPerson: '‡∏ô‡∏≤‡∏¢ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏£‡∏∞‡∏ö‡∏ö',
        email: 'test@company.com',
        phone: '02-123-4567',
        address: '123 ‡∏ñ‡∏ô‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û 10100',
        isActive: true,
        workingArea: ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', '‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'],
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        companyId: 'COM002',
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        type: 'sub',
        contactPerson: '‡∏ô‡∏≤‡∏á ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        email: 'sample@company.com',
        phone: '02-765-4321',
        address: '456 ‡∏ñ‡∏ô‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û 10200',
        isActive: true,
        workingArea: ['‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á', '‡∏†‡∏≤‡∏Ñ‡∏ï‡∏∞‡∏ß‡∏±‡∏ô‡∏≠‡∏≠‡∏Å'],
        createdAt: new Date(),
        updatedAt: new Date(),
      }
    ];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á sample vendors
    const sampleVendors: Omit<CSMVendor, 'id'>[] = [
      {
        companyId: 'COM001',
        vdCode: 'VD001',
        vdName: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö 1',
        freqAss: '365',
        isActive: true,
        category: '1',
        workingArea: ['‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û'],
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'system',
        lastUpdatedBy: 'system'
      },
      {
        companyId: 'COM001',
        vdCode: 'VD002',
        vdName: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö 2',
        freqAss: '180',
        isActive: true,
        category: '2',
        workingArea: ['‡∏õ‡∏£‡∏¥‡∏°‡∏ì‡∏ë‡∏•'],
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'system',
        lastUpdatedBy: 'system'
      },
      {
        companyId: 'COM002',
        vdCode: 'VD003',
        vdName: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
        freqAss: '365',
        isActive: true,
        category: 'maintenance',
        workingArea: ['‡∏†‡∏≤‡∏Ñ‡∏Å‡∏•‡∏≤‡∏á'],
        createdAt: new Date(),
        updatedAt: new Date(),
        createdBy: 'system',
        lastUpdatedBy: 'system'
      }
    ];
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å companies
    console.log('üìù Creating companies...');
    for (const company of sampleCompanies) {
      await setDoc(doc(db, 'companies', company.companyId), company);
      console.log(`‚úÖ Created company: ${company.name}`);
    }
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å vendors
    console.log('üìù Creating vendors...');
    for (const vendor of sampleVendors) {
      await addDoc(collection(db, 'csmVendors'), vendor);
      console.log(`‚úÖ Created vendor: ${vendor.vdName}`);
    }
    
    console.log('üéâ Sample data created successfully!');
    return true;
    
  } catch (error) {
    console.error('‚ùå Error creating sample data:', error);
    return false;
  }
};

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡∏£‡∏∞‡∏ö‡∏ö CSM
 */
export const debugCSMSystem = async () => {
  console.log('üöÄ Starting CSM System Debug...');
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const currentData = await performCSMDataCheck();
  
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  if (currentData.vendors.count === 0 || currentData.companies.count === 0) {
    console.log('üí° No data found, creating sample data...');
    const created = await createSampleData();
    
    if (created) {
      console.log('üîÑ Rechecking data after creation...');
      await performCSMDataCheck();
    }
  }
  
  console.log('‚úÖ CSM System Debug completed!');
};

// =================== UTILITY FOR REACT COMPONENTS ===================
/**
 * Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô React Component ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug CSM data
 */
export const useCSMDebug = () => {
  const debugData = async () => {
    try {
      await debugCSMSystem();
    } catch (error) {
      console.error('Debug failed:', error);
    }
  };
  
  const checkData = async () => {
    return await performCSMDataCheck();
  };
  
  const createSample = async () => {
    return await createSampleData();
  };
  
  return {
    debugData,
    checkData,
    createSample
  };
};